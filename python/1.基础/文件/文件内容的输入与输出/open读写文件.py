#!/usr/bin/python3.7
#Filename:open读写文件.py

class a1:
    print('a1:')
    #可以新生成一个文件
    f = open("C:\\Users\\15394\\Desktop\\新建文本文档.txt","w")
    #第一个参数为要打开的文件名
    #第二个参数描述文件要如何使用的字符

    f.write("ab\ncde\nf\n1\n")           #将字符串写入文件，返回的是写入的字符长度
    #print("a1：",f.write("a\nb\nc\n1"))    #用于输出写入的有多少个字符数
    f.writelines(['4567\n','666\n'])     #写入多行，一行是一个元素
    f.close()

    f = open("C:\\Users\\15394\\Desktop\\新建文本文档.txt","a")  #“a”添加内容（不改变原有内容）。相对路径。在当前（程序）目录下打开文件
    f.write("\n23")
    f.close()


class a2:
    print("a2：")
    f = open("C:\\Users\\15394\\Desktop\\新建文本文档.txt","r")     
    print(f.read(4))                     #可参考填入“9”
    #f.read(size)，size是一个可选的数字类型参数，用以判断返回多少数目的数据（换行符等占一个字符），
    #size被忽略或为负时，读取并返回所有内容。
    f.close()


class a3:
    print("a3：")
    f = open("C:\\Users\\15394\\Desktop\\新建文本文档.txt","r")
    str = f.readline()
    #f.readline()会从文件中读取单独的一行。如果返回一个空字符串，表明已经读取到最后一行
    print(str)
    print(str)
    f.close()

class a4:
    print("a4：")
    f = open("C:\\Users\\15394\\Desktop\\新建文本文档.txt","r")
    Str = f.readlines(3)     #返回一个字符串列表，每一行的内容（加上换行符）是列表内的一个元素
    #f.readlines(size)返回指定长度的字节(一行内容是一个单位长度，后面的换行符占一个单位长度)，并按行分割（换行符为\n）。为空则返回所有行。
    #Str = f.read().splitlines()    #列表内的元素（每行的内容）会去掉每行的换行符
    print(Str)
    for i in Str:
        print(i)
    f.close

print()

class a5:
    print("a5：")
    f = open("C:\\Users\\15394\\Desktop\\新建文本文档.txt","r")
    print(f)
    for line in f:              #与2比较
        print(line,end="")
    f.close

print("\n")

class a6:
    print("a6：")
    #如果写入的不是字符串，则需要先进行转换
    f = open("C:\\Users\\15394\\Desktop\\新建文本文档1.txt","w")
    a = ("啊啊啊",1)   #1和a不属于字符型，a属于元组型
    b = str(a)
    f.write(b)
    f.close

    with open("C:\\Users\\15394\\Desktop\\新建文本文档1.txt","r") as f:      #与class a2比较
        print(f.read())
    #利用with关键字处理文件，在结束后会自动正确关闭文件
    #print(f.read())     #在文件关闭后，若再调用该文件，会引发异常。需重新（open）打开文件
    #f.close

"""
r模式，默认模式，文件不存在则报错

w模式，文件不存在则创建，文件存在则覆盖

a模式，文件不存在则创建，文件存在则不会覆盖，写内容会以追加的方式写（写日志文件的时候常用），追加模式是一种特殊的写模式

b(rb,wb,ab)模式：不用加encoding:utf-8
"""

"""
r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。

rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。

r+	打开一个文件用于读写。文件指针将会放在文件的开头。

rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。

w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。

wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。

w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。

wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。

a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。

ab	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。

a+	打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。

ab+	以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。
"""

#使用with方法写入文件时，write()方法内有且只能有一个key。
"""
例：f.write("这个是：",a,ending=' ','\n')
这里就会出错，要么分成三条语句写。
另外，每次write()执行时，都会直接在文档原有的字符后直接写入(不覆盖时)，而不会自己另起一行。
不论with方法有没有关闭(如with方法在for内运行)，write()都不会自己单独另起一行，若要另起一行，可再单独执行一条写入'\n'的命令，或f.write(a+'\n')。
"""








