1.数字
  整型：tinyinit   int   bigint
  
  小数：float ：在位数比较短时不精准
            double ：在位数比较长时不精准   0.0000001230123131  存成  0.0000001230000
            decimal ：精准（内部原理是以字符串形式去存）
            
            建议用  decimal

2.字符串
  char(10) ：简单粗暴，浪费空间，存取速度块    root  存成   root000000
  varchar ：精准，节省时间，存取速度慢
  
  sql优化：创建表时，定长的类型往前放（如：性别），变长的类型往后放（如：地址或描述信息）

  >255个字符，超了就把文件路径存放到数据库中。如：图片，视频等找一个文件服务器，数据库中只存路径或url

3.时间类型
  datetime ：最常用

4.枚举类型和集合类型
  枚举类型：enum。只能在给定的范围内选一个值，如性别 sex 男male/女female
  集合类型：set。多选 在给定的范围内可以选择一个或一个以上的值（爱好1,爱好2,爱好3...）
  eg.create table myset (col set('a', 'b', 'c', 'd'));
       insert into myset (col) vlaues('a,d'), ('d,a'), ('a,d,a'), ('a,d,d'), ('d,a,d');

浮点型（小数）：
1. FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]
定义：单精度浮点数（非准确小数值），m是整数部分+小数部分的总个数，d是小数点后个数。m最大值为255，d最大值为30，例如：float(255,30)
精确度：随着小数的增多，精度变得不准确
2. double[(M,D)] [UNSIGNED] [ZEROFILL
定义：双精度浮点数（非准确小数值），m是整数部分+小数部分的总个数，d是小数点后个数。m最大值也为255，d最大值也为30
精确度：随着小数的增多，精度比float要高，但也会变得不准确
3. decimal[(m[,d])] [unsigned] [zerofill]
定义：准确的小数值，m是整数部分+小数部分的总个数（负号不算），d是小数点后个数。 m最大值为65，d最大值为30。比float和double的整数个数少，但是小数位数都是30位
精确度：随着小数的增多，精度始终准确
               对于精确数值计算时需要用此类型
               decimal能够存储精确值的原因在于其内部按照字符串存储
选取：精度高到低：decimal、double、float
    decimal精度高，但是整数位数少
    float和double精度低，但是整数位数多
    float已经满足绝大多数的场景了，但是什么导弹、航线等要求精度非常高，所以还是需要按照业务场景自行选择，如果又要精度高又要整数位数多，那么你可以直接用字符串来存。

日期类型：
year: YYYY （范围：1901/2155）
date: YYYY-MM-DD （范围：1000-01-01/9999-12-31）例：2018-01-30
time: HH:MM:SS （范围：'-838:59:59'/'838:59:59'）例：12：09：32
datetime: YYYY-MM-DD HH:MM:SS （范围：1000-01-01 00:00:00/9999-12-31 23:59:59） 例：2018-01-31 08:29:50
timestamp: YYYYMMDD HHMMSS （范围：1970-01-01 00:00:00/2037 年某时）
注意：
    1. 单独插入时间时，需要以字符串的形式，按照对应的格式插入
    2. 插入年份时，尽量使用4位值
    3. 插入两位年份时，<=69，以20开头，比如50,  结果2050      
                    >=70，以19开头，比如71，结果1971
    4.插入现在的时间，可以用now()。如：values(now());
datetime与timestamp的区别：
1.DATETIME的日期范围是1001――9999年，TIMESTAMP的时间范围是1970――2038年。
2.DATETIME存储时间与时区无关，TIMESTAMP存储时间与时区有关，显示的值也依赖于时区。在mysql服务器，操作系统以及客户端   连接都有时区的设置。
3.DATETIME使用8字节的存储空间，TIMESTAMP的存储空间为4字节。因此，TIMESTAMP比DATETIME的空间利用率更高。
4.DATETIME的默认值为null；TIMESTAMP的字段默认不为空（not null）,默认值为当前时间（CURRENT_TIMESTAMP），如果不做特   殊处理，并且update语句中没有指定该列的更新值，则默认更新为当前时间。

字符串：
    针对char类型，mysql在存储的时候会将不足规定长度的数据使用后面(右边补全)补充空格的形式进行补全，然后存放到硬盘中，但是在读取或者使用的时候会自动去掉它给你补全的空格内容，因为这些空格并不是我们自己存储的数据，所以对我们使用者来说是无用的。
性能对比：
char：
　　优点：简单粗暴，不管你是多长的数据，我就按照规定的长度来存，5个5个的存，三个人名就会类似这种存储：sb ssb1 ssbb2，中间是空格补全，取数据的时候5个5个的取，简单粗暴速度快
　　缺点：貌似浪费空间，并且我们将来存储的数据的长度可能会参差不齐
varchar：varchar类型不定长存储数据，更为精简和节省空间
       优点：节省了一些硬盘空间，一个acsii码的字符用一个bytes长度就能表示，但是也并不一定比char省，看一下官网给出的一个表格对比数据，当你存的数据正好是你规定的字段长度的时候，varchar反而占用的空间比char要多。
       缺点：存取速度都慢













